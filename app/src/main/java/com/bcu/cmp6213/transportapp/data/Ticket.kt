// File: com/bcu/cmp6213/transportapp/data/Ticket.kt
package com.bcu.cmp6213.transportapp.data

// Import annotation for Firestore to automatically manage the document ID.
import com.google.firebase.firestore.DocumentId
// Import annotation for Firestore to automatically set a server-side timestamp.
import com.google.firebase.firestore.ServerTimestamp
// Import Java's Date class for handling timestamp information.
import java.util.Date

/**
 * Represents a "purchased" ticket for a specific transport journey.
 * This data class is designed to be stored in and retrieved from Firestore.
 * It includes details about the route, the specific journey leg (origin/destination stops and times),
 * mock fare, mock QR code data, and a purchase timestamp.
 *
 * Note: This class is not currently Parcelable. If instances need to be passed between
 * Android components (e.g., in Intent extras), consider implementing Parcelable
 * (e.g., using `@kotlinx.parcelize.Parcelize`).
 */
data class Ticket(
    /**
     * The unique ID for this ticket document in Firestore.
     * Annotated with `@DocumentId`, Firestore will automatically populate this field
     * with the ID of the document when data is retrieved.
     * It's nullable because it's generated by Firestore and might not be set on a new, unsaved instance.
     */
    @DocumentId
    var id: String? = null,

    /**
     * The Firebase User ID (UID) of the user who "owns" or "purchased" this ticket.
     * This links the ticket to a specific user account in Firebase Authentication.
     */
    var userId: String? = null,

    // --- Route and Journey Specific Details ---
    /**
     * A user-friendly display name for the route, potentially combining short and long names.
     * Example: "X1 - Birmingham to Coventry".
     */
    var routeNameDisplay: String? = null,

    /**
     * The short name of the route (e.g., "X1", "7").
     * Derived from the GtfsRoute object.
     */
    var routeShortName: String? = null,

    /**
     * The long, descriptive name of the route.
     * Derived from the GtfsRoute object.
     */
    var routeLongName: String? = null,

    /**
     * The type of transport for the route (e.g., "3" for Bus, "0" for Tram).
     * Derived from the GtfsRoute object.
     */
    var routeType: String? = null,

    /**
     * The name of the origin stop for this specific ticketed journey.
     */
    var originStopName: String? = null,

    /**
     * The name of the destination stop for this specific ticketed journey.
     */
    var destinationStopName: String? = null,

    /**
     * The scheduled departure time from the `originStopName` for this journey.
     * Typically in "HH:MM:SS" format from GTFS.
     */
    var originDepartureTime: String? = null,

    /**
     * The scheduled arrival time at the `destinationStopName` for this journey.
     * Typically in "HH:MM:SS" format from GTFS.
     */
    var destinationArrivalTime: String? = null,

    // --- Original/Core Ticket Fields ---
    /**
     * The mock fare charged for this ticket.
     * Stored as a Double (e.g., 2.50).
     */
    var fare: Double? = null,

    /**
     * Mock data representing a QR code for the ticket.
     * In a real system, this might be a unique token or structured data for scanning.
     * Example: "MOCK_QR_ плюс a unique identifier".
     */
    var qrCodeData: String? = null,

    /**
     * The timestamp indicating when the ticket was "purchased" (i.e., created in Firestore).
     * Annotated with `@ServerTimestamp`, Firestore will automatically populate this field
     * with the server's current time when the document is first written.
     * It's nullable because it's set by the server and won't be present until saved.
     */
    @ServerTimestamp
    var purchaseTimestamp: Date? = null
) {
    /**
     * A no-argument constructor.
     * This is required by Firestore for deserializing (converting) Firestore documents
     * back into Kotlin `Ticket` objects. When Firestore retrieves a document,
     * it first creates an empty object using this constructor and then populates its fields.
     */
    constructor() : this(
        id = null,
        userId = null,
        routeNameDisplay = null,
        routeShortName = null,
        routeLongName = null,
        routeType = null,
        originStopName = null,
        destinationStopName = null,
        originDepartureTime = null,
        destinationArrivalTime = null,
        fare = null,
        qrCodeData = null,
        purchaseTimestamp = null
    )
}